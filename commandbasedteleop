import com.arcrobotics.ftclib.command.CommandOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

@TeleOp(name="Robot", group="CommandOpMode")

public class commandbasedteleop extends CommandOpMode {
    public DcMotor  leftDrive = null;
    public DcMotor  rightDrive = null;
    public Servo leftClaw = null;
    public Servo rightClaw = null;

    double clawOffset = 0;

    public static final double MID_SERVO   =  0.5 ;
    public static final double CLAW_SPEED = 0.02;

    @Override
    public void initialize() {
        waitForStart();
            double left;
            double right;
            double drive;
            double turn;
            double power = 0.5;

            leftDrive  = hardwareMap.get(DcMotor.class, "left_drive");
            rightDrive = hardwareMap.get(DcMotor.class, "right_drive");

            leftDrive.setPower(power);
            rightDrive.setPower(power);

            leftDrive.setDirection(DcMotor.Direction.REVERSE);
            rightDrive.setDirection(DcMotor.Direction.FORWARD);

            leftClaw  = hardwareMap.get(Servo.class, "left_hand");
            rightClaw = hardwareMap.get(Servo.class, "right_hand");
            leftClaw.setPosition(MID_SERVO);
            rightClaw.setPosition(MID_SERVO);

                while (opModeIsActive()) {
                    drive = -gamepad1.left_stick_y;
                    turn = gamepad1.right_stick_x;

                    left = drive + turn;
                    right = drive - turn;

            if (gamepad1.right_bumper)
                clawOffset += CLAW_SPEED;
                else if (gamepad1.left_bumper)
                    clawOffset -= CLAW_SPEED;

                clawOffset = Range.clip(clawOffset, -0.5, 0.5);
                leftClaw.setPosition(MID_SERVO + clawOffset);
                rightClaw.setPosition(MID_SERVO - clawOffset);
        }
    }
}
